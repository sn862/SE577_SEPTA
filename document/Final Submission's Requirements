1. Updated Use Cases, Component Diagram, and Deployment Diagram that matche your TrainTicket implementation, including:

(1) Use cases

(a) that are implemented, which should include all the use cases listed in "TrainTicket Required Use Cases", and other use cases that you would like to offer

(b) the flow of events of each use case, which are supposed to be read by architects, customers, and developers

(c) the user stories (scenarios) that elaborate flow of events and match the issue tickets recorded in the repo. 

(4) A Component Diagram that models the major components and their relations; 

(3) A Deployment Diagram that models how the major components  should be deployed. 


2. Updated UML classes diagrams and sequence diagrams modeling the following use cases and match your implementation

(1) Search tickets

(2) Check out

(3) Manage itineraries, e.g, adding stops, manage available tickets, route info 

3. Updated Quality Attribute document

Specify three QA scenarios that your have implemented addressing Modifiability, Security, and Interoperability, similar to Individual Homework 3.

Make clear how each QA is addressed by which part of the source code. 

4. We will also check out your repo by Midnight Saturday.  Your repo should have a readme page to indicate how to install and execute your software, similar to the instruction Jason provided to the class for installing and running shopizer. We will check: 

(1) If all the user stories documented are managed as issues, and assigned to developers.

(2) the implementation status of your projects: how many user stories documented have been  implemented and can be tested.

(3) the conformance and accuracy between other design documents and source code. 

(4) the architecture and design of your system using DV8.
